name: Continuous Integration
on:
  pull_request:
    branches: [develop, staging, main]

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Code Quality
        uses: super-linter/super-linter/v5
        env:
          VALIDATE_PYTHON: true
          VALIDATE_TERRAFORM: true

      - name: Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Unit Tests
        run: |
          pip install -r requirements-dev.txt
          pytest tests/ --cov=src/ --cov-fail-under=90

      - name: Infrastructure Validation
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - run: |
          for env in dev staging prod; do
            cd terraform/environments/$env
            terraform init -backend=false
            terraform validate
            cd -
          done

  plan:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_READONLY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/prod
          terraform init
          # The spec's Post Plan step expects the plan output in a PLAN env var.
          # We capture the output of terraform plan and save it to the GITHUB_ENV file.
          TERRAFORM_PLAN_OUTPUT=$(terraform plan -detailed-exitcode -no-color -out=tfplan 2>&1)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$TERRAFORM_PLAN_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        continue-on-error: true

      - name: Post Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ env.PLAN }}
        with:
          script: |
            const output = `### Terraform Plan for Production
            \`\`\`diff
            ${process.env.PLAN}
            \`\`\`
            *Pushed by: @${{ github.actor }}, Action: ${{ github.event_name }}*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
